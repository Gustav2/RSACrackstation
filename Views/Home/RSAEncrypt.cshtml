@{
    <!-- Updates the title -->
    ViewData["Title"] = "RSA Encrypter";
}

<section class="text-gray-600 body-font h-min">
    <!-- Tailwind automatically creates sufficient margin to sides with "container" -->
    <div class="container px-5 pt-12 mx-auto">
        <div class="flex flex-wrap w-full mb-20 flex-col items-center text-center">
            <h1 class="sm:text-3xl text-2xl font-medium title-font mb-2 text-gray-900 dark:text-gray-50 mb-12">RSA Encrypter</h1>

            <div class="w-full sm:w-5/6">
                <!-- Prime input field and HEX/Decimal toggle -->
                <div class="w-full flex justify-center">
                    <span class="text-2xl mr-3 dark:text-gray-100 w-8">N</span>
                    <input id="N" placeholder="N" class="dark:bg-gray-600 dark:bg-opacity-20 focus:bg-transparent focus:ring-2 focus:ring-indigo-900 rounded border dark:border-gray-600 border-gray-300 focus:border-indigo-500 text-base outline-none dark:text-gray-100 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out flex-grow"/>
                    <div class="w-fit text-white">
                        <button id="hexToggle" class="border-2 border-gray-700 rounded-xl flex p-0.5 gap-1 font-bold ml-4" onclick="updateHexToggle()" data-tooltip-target="hexTooltip">
                            <span class="bg-indigo-500 p-2 rounded-lg">10</span>
                            <span class="bg-transparent p-2 rounded-lg">16</span>
                        </button>
                    </div>
                    <div id="hexTooltip" role="tooltip" class="w-36 -translate-x-1/2 absolute invisible z-10 py-2 px-3 text-sm font-medium text-white bg-gray-900 rounded-lg shadow-sm opacity-0 transition-opacity duration-300 tooltip dark:bg-gray-700">
                        <span>Choose between base10 (decimal) and base16 (hexadecimal)</span>
                    </div>
                </div>
                <div class="w-full mt-6 flex">
                    <span class="text-2xl mr-3 dark:text-gray-100 w-8">e</span>
                    <input id="e" placeholder="e" value="65537" class="dark:bg-gray-600 dark:bg-opacity-20 focus:bg-transparent focus:ring-2 focus:ring-indigo-900 rounded border dark:border-gray-600 border-gray-300 focus:border-indigo-500 text-base outline-none dark:text-gray-100 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out flex-grow"/>
                </div>
                <div class="w-full mt-6 mb-2 flex">
                    <span class="text-2xl mr-3 dark:text-gray-100 w-8">m</span>
                    <input id="pt" placeholder="m" class="dark:bg-gray-600 dark:bg-opacity-20 focus:bg-transparent focus:ring-2 focus:ring-indigo-900 rounded border dark:border-gray-600 border-gray-300 focus:border-indigo-500 text-base outline-none dark:text-gray-100 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out flex-grow"/>
                </div>
            </div>
            <ul id="inputRadio" class="items-center w-1/2 text-sm font-medium text-gray-900 bg-white rounded-lg border border-gray-200 sm:flex dark:bg-gray-700 dark:border-gray-600 dark:text-white mb-4">
                <li class="w-full border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-600 rounded-l-lg bg-indigo-500">
                    <div class="flex items-center ">
                        <input id="mASCII" checked type="radio" value="0" name="list-radio" class="hidden text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                        <label for="mASCII" class="cursor-pointer py-3 ml-2 w-full text-sm font-medium text-gray-900 dark:text-gray-300">ASCII</label>
                    </div>
                </li>
                <li class="w-full border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-600">
                    <div class="flex items-center ">
                        <input id="mDecimal" type="radio" value="1" name="list-radio" class="hidden text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                        <label for="mDecimal" class="cursor-pointer py-3 ml-2 w-full text-sm font-medium text-gray-900 dark:text-gray-300">Decimal</label>
                    </div>
                </li>
                <li class="w-full dark:border-gray-600 rounded-r-lg">
                    <div class="flex items-center">
                        <input id="mHEX" type="radio" value="2" name="list-radio" class="hidden text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                        <label for="mHEX" class="cursor-pointer py-3 ml-2 w-full text-sm font-medium text-gray-900 dark:text-gray-300">HEX</label>
                    </div>
                </li>
            </ul>
            <button id="subBtn" onclick="encrypt()" class="mb-6 flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg">Submit</button>


            <div class="box w-2/3 flex justify-center">
                <input id="c" placeholder="c" class="dark:bg-gray-600 dark:bg-opacity-20 focus:bg-transparent focus:ring-2 focus:ring-indigo-900 rounded border dark:border-gray-600 border-gray-300 focus:border-indigo-500 text-base outline-none dark:text-gray-100 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out w-2/3"/>
                <div class="w-fit text-white ml-4">
                    <button id="hexToggle2" class="border-2 border-gray-700 rounded-xl flex p-0.5 gap-1 font-bold" onclick="updateHexToggle2()" data-tooltip-target="hexTooltip">
                        <span class="bg-indigo-500 p-2 rounded-lg">10</span>
                        <span class="bg-transparent p-2 rounded-lg">16</span>
                    </button>
                </div>
            </div>


        </div>
    </div>
</section>


<script>

    let params = new URLSearchParams(window.location.search);
    let N = params.get('N');
    if (params.get('N') != null) {
        document.getElementById("N").value = N;
    }
    
    $(document).ready(function() {
      //change colour when radio is selected
        $('#inputRadio input:radio').change(function() {
        // Only remove the class in the specific `box` that contains the radio
        $('li.bg-indigo-500').removeClass('bg-indigo-500');
        $(this).closest('li').addClass('bg-indigo-500');
        });
    });
    
    
    // Hextoggle button styling change
    $("#hexToggle2").click(function() {
        // Toggle the value of #pt, if it's not empty
        c = toggleHexContent($("#c").val(), isHex2);
        if(c === -1) {
            showSnackbar("Hex conversion failed", 0);
            return;
        }
        $("#c").val(c);
    });
    
    // Checks if number is pasted and automatically changes state to hex if hex is pasted
    $("#N").bind('paste', function(e) {
        let data = e.originalEvent.clipboardData.getData('text');
        if (/[A-Za-z]/g.test(data) && !isHex) {  // Check if pasted value is hex
            updateHexToggle();
        }
        else if (isHex){
            updateHexToggle();
        }
    });
    
    // Submits form if enter is pressed
    $("#pt").keypress(function(event) {
        if (event.keyCode === 13) {
            encrypt();
        }
    });
    
    // Sends the value to crack site with the calculated values
    function sendToRSACrack() {
        let location = "/Home/RSACrack"
        let p = $("#p").val();
        let q = $("#q").val();
        if (p !== "" && q !== "") {
            location += `?p=${p}&q=${q}`;
        }
        window.location.href = location;
    }
    
    
    // Sends the data to backend with AJAX call and displays the returned result
    // If it returns an error, it displays an error message
    function encrypt() {
        let N = $("#N").val();
        
        if (N.substring(0, 2) === "0x"){
            if (!isHex){
                updateHexToggle()
            }
            N = N.substring(2);
        }
        
        if (!N.match(/^[0-9]+$/g) && !isHex) {
            showSnackbar("Please enter a number", 1)
            return;
        }
        else if (isHex) {
            N = hexToDecimal(N);
            if (N === -1) {
                showSnackbar("Invalid hex number", 0);
                return;
            }
        }
        
        let e = $("#e").val();
        let pt = $("#pt").val();
        let inputType = $("input[name='list-radio']:checked").val();
        
        if (!N.match(/^[0-9]+$/g) && !isHex) {
            showSnackbar("Please enter a valid number");
            return;
        }
        
        switch (parseInt(inputType)){
            case 0:
                pt = asciiToDecimal(pt);
                break;
            case 1:
                if (!pt.match(/^[0-9]+$/g)) {
                    showSnackbar("Please enter a valid number", 0);
                    return;
                }
                break;
            case 2:
                if (!pt.match(/^[0-9A-Fa-f]+$/g)) {
                    showSnackbar("Please enter a valid hex string", 0);
                    return;
                }
                pt = hexToDecimal(pt);
                break;
        }
        if (pt > N) {
            showSnackbar("Can not encrypt message larger than N", 0);
            return;
        }
        
        $.ajax({
            url: "/api/Encrypt",
            type: "POST",
            data: {
                "N": N,
                "e": e,
                "pt": pt,
            },
            success: function(data) {
                if (isHex2 !== isHex){
                    updateHexToggle2();
                }
                if (isHex2){
                    data = decimalToHex(data);
                }
                $("#c").val(data);
            }
        });
    }



</script>